    CONTRACT_TYPE
    {
        name = KerbalAcademyBootCamp
        title = Kerbal Academy: Boot Camp
		group = KerbalAcademy
        description = Your space program is suffering from a lack of @/roleStringPlural Take a kerbal through basic training.
        synopsis = Take a @/roleString through Boot Camp.
		notes = If your new recruit is a Pilot or a Scientist, please ignore the training drill. It will be cleaned up on contract completion.
        completedMessage = Excellent. Your new recruit has a nice headstart.
        agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
		maxSimultaneous = 1
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = NextKerbalHireCost()/2
        failureReputation = 0
        failureFunds = 0
        advanceFunds = 0
		weight = 10
		

		DATA
		{
			type = List<Kerbal>
			requiredValue = false
			pilots = AllKerbals().Where(k => k.ExperienceTrait() == "Pilot" && k.RosterStatus() == Available && k.Type() == Crew)
			scientists = AllKerbals().Where(k => k.ExperienceTrait() == "Scientist" && k.RosterStatus() == Available && k.Type() == Crew)
			engineers = AllKerbals().Where(k => k.ExperienceTrait() == "Engineer" && k.RosterStatus() == Available && k.Type() == Crew)
		}
		
		DATA
		{
			type = string
			roleString = @/pilots.Count() == 0 ? "Pilot" : @/scientists.Count() == 0 ? "Scientist" : "Engineer"
			roleStringPlural = @/pilots.Count() == 0 ? "Pilots." : @/scientists.Count() == 0 ? "Scientists." : "Engineers."
		}

		DATA
		{
		type = Biome
		biome = MainKSCBiomes().Where(b => b.RemainingScience()>0).Random()
		fallbackBiome = MainKSCBiomes().Random()
		}

		DATA
		{
			type = List<ScienceSubject>
			requiredValue = false
			experimentList = AllScienceSubjectsByBiome([@biome]).Where(s => s.RemainingScience()>0)
			fallbackList = AllScienceSubjectsByBiome([@fallbackBiome])
		}

				DATA
		{
			type = ScienceSubject
			uniquenessCheck = GROUP_ACTIVE
			experiment = @/experimentList.Count() >0 ? @/experimentList.Random() : @/fallbackList.Random()
		}

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			parameter = BootCamp
			experience = 1
		}

	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
		
		PQS_CITY
		{
			name = The Island Training Facility
			hidden = @/roleString == "Pilots." ? false : true
			icon = pressure
			pqsCity = IslandAirfield
		}
	}

	BEHAVIOUR
	{
    name = SpawnVessel
    type = SpawnVessel
	deferVesselCreation = true
	VESSEL
    {
        name = Training Drill (Engineers Only)
        craftURL = ContractPacks/KerbalAcademy/Ships/Driller.craft
        flagURL = ContractPacks/KerbalAcademy/Agents/KerbalAcademy
        vesselType = Base
        owned = true
		pqsCity = KSC
		pitch = 180
	}
	}

	BEHAVIOUR
	{
    name = DestroyVessel
    type = DestroyVessel
	onState = CONTRACT_COMPLETED
	vessel = Training Drill
	}

		PARAMETER
		{
			name = BootCamp
			type = VesselParameterGroup
			define = BootCamp
			dissassociateVesselsOnContractCompletion = true
			hideChildren = true
			title = Place your new recruit in a vessel capable of performing the mission.
		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			trait = @/roleString == "Pilots." ? "Pilot" : @/roleString == "Scientists." ? "Scientist" : "Engineer"
			maxExperience = 0
			minCrew = 1
		}
		}

		PARAMETER
		{
			name = KerbalDeaths
			type = KerbalDeaths
			vessel = BootCamp
			hidden = true
		}

		PARAMETER
		{
			name = Training
			type = VesselParameterGroup
			vessel = BootCamp
			
		PARAMETER
		{
			name = PilotBootCamp
			type = All
			hideChildren = true
			title = Land within 500m of the waypoint at the Island Training Facility.
			disableOnStateChange = true
			PARAMETER
			{
				name = PilotBootCamp
				type = VisitWaypoint
				index = 0
			}

			PARAMETER
			{
				name = ReachState
				type = ReachState
				situation = LANDED
			}

			REQUIREMENT
			{
				name = PilotCheck
				type = Expression
				expression = (@/roleString == "Pilots.")
			}
		}

		PARAMETER
		{
			name = ScientistBootCamp
			type = CollectScience
			subject = @/experiment
			recoveryMethod = Recover

		
			REQUIREMENT
			{
				name = ScientistCheck
				type = Expression
				expression = (@/roleString == "Scientists.")
			}
		}
		}
		PARAMETER
		{
			name = EngineerBootCamp
			type = VesselParameterGroup
			title = Perform Drilling Simulations on board the Training Drill.
			vessel = Training Drill
			PARAMETER
			{
				name = HasCrew
				type = HasCrew
				trait = Engineer
				maxExperience = 0
				minCrew = 1
			}
		REQUIREMENT
		{
				name = EngineerCheck
				type = Expression
				expression = (@/roleString == "Engineers.")
		}
		}

	PARAMETER
	{
    name = Duration
    type = Duration
	duration = 5m
	preWaitText = Waiting for Simulation to begin.
	waitingText = Simulation in Progress
	completionText = Simulation Complete
	startCriteria = PARAMETER_COMPLETION
	parameter = EngineerBootCamp
	
	REQUIREMENT
	{
		name = EngineerCheck
		type = Expression
		expression = (@/roleString == "Engineers.")
	}
	}

	PARAMETER
	{
    name = RecoverVessel
    type = RecoverVessel
	completeInSequence = true
	title = Recover your vessel with the new recruit inside it.
	}

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/pilots.Count() == 0 || @/scientists.Count() == 0 || @/engineers.Count() == 0)
	}
}

	
		
		

		