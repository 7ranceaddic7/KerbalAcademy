    CONTRACT_TYPE
    {
        name = KerbalAcademyScientificPrinciples
        title = Kerbal Academy: Scientific Principles
		group = KerbalAcademy
        description = Looks like @/trainee could do with brushing up on their scientific knowledge. Good job @/mentor is on hand to help.
        synopsis = Let @/trainee collect @/experiment while being tutored by @/mentor
        completedMessage = Perfect. @/trainee can feel the benefit of @/mentor and their experience already.
        //commented out for now. Add agent later. agent = Kerbal Academy
        minExpiry = 1
        maxExpiry = 7
        cancellable = true
        declinable = true
        prestige = Significant
        targetBody = HomeWorld()
        rewardScience = 0.0
        rewardReputation = 0.0
        rewardFunds = 0
        failureReputation = 0
        failureFunds = 0
        advanceFunds = @/trainingCost
		notes = Experiment must be transmitted. Don't forget the antenna!
		weight = 10
		
		DATA
		{
			type = Kerbal
			uniquenessCheck = CONTRACT_ACTIVE
			mentor = AllKerbals().Where(m => m.ExperienceTrait() == "Scientist" && m.ExperienceLevel()>=2 && m.Type() == Crew && m.RosterStatus() == Available).Random()
			trainee = AllKerbals().Where(m => m.ExperienceTrait() == "Scientist" && m.ExperienceLevel()<= @/minExperience && m.Type() == Crew && m.RosterStatus() == Available).Random()
		}

		DATA
		{
			type = double
			levelGain = @/mentor.ExperienceLevel() - @/trainee.ExperienceLevel()-1
			newLevel = @/mentor.ExperienceLevel()-1
			trainingCost = @levelGain*-100000
			expAward = @newLevel == 4 ? 16 : @newLevel == 3 ? 8 : @newLevel == 2 ? 6 : 2
			minExperience = @/mentor.ExperienceLevel()-2
		}

		DATA
		{
			type = CelestialBody
			home = HomeWorld()
			orbited = OrbitedBodies().Random()
		}

				DATA
		{
			type = List<Biome>
			requiredValue = false
			KSC = KSCBiomes().ExcludeAll(MainKSCBiomes())
			homeBiomes = @/home.Biomes().Where(r => r.RemainingScience() >= Science())
			orbitedBiomes = @/orbited.Biomes().Where(r => r.RemainingScience() >= Science())
			validhomeBiomes = @/homeBiomes.ExcludeAll(@KSC)
			validorbitBiomes = @/orbitedBiomes.ExcludeAll(@KSC)
		}

			DATA
		{ 
			type = Biome
			requiredValue = false
			homeBiome = @/validhomeBiomes.Random()
			orbitBiome = @/validorbitBiomes.Random()
		}
		DATA
		{
			type = List<ScienceSubject>
			requiredValue = false
			orbitExperiment = AllScienceSubjectsByBiome([@orbitBiome]).Where(s => s.RemainingScience()>0 && s.RemainingScience()<=Science())
			homeExperiment = AllScienceSubjectsByBiome([@homeBiome]).Where(s => s.RemainingScience()>0 && s.RemainingScience()<=Science())
		}

		DATA
		{
			type = ScienceSubject
			uniquenessCheck = GROUP_ACTIVE
			experiment = @/homeExperiment.Count()>0 ? @/homeExperiment.Random() : @/orbitExperiment.Random()
		}
		

		BEHAVIOUR
		{
			name = AwardExperience
			type = AwardExperience
			kerbal = @/trainee
			experience = @/expAward
		}

	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		kerbal = @/mentor	
		kerbal = @/trainee
	}

	PARAMETER
	{
		name = CollectScience
		type = CollectScience
		subject = @/experiment
		recoveryMethod = Recover
	}	

	REQUIREMENT
	{
		name = Expression
		type = Expression
		expression = (@/mentor.RosterStatus() == Available && @/trainee.RosterStatus() == Available && @/trainee.ExperienceLevel()<= @/minExperience && @/trainee.ExperienceLevel() < @/newLevel)
	}
}

	
		
		

		